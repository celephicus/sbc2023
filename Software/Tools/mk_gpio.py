import csv, sys

pins = {}
direct = []
infile = sys.argv[1]

with open(infile, 'rt') as csvfile:
	reader = csv.reader(csvfile)
	for row in reader:
		# D1/TXD,RS485_TXD,TXD,RS485 TX,RS485 Bus,J7/12,31,PD1,TXD/PCINT17,Bootloader
		try:
			pin = row[0].split('/')[0]
			signal, function, description, group, pin_ard, pin_proc, pin_port = row[1:8]
		except IndexError:
			continue
		if not function or row[0].startswith('#'):
			continue
		if not group:
			group = 'None'
		if pin.startswith('D'):
			pin = pin[1:]
			
		if group not in pins:
			pins[group] = []
		pins[group].append(f'GPIO_PIN_{signal} = {pin}, 		/* {description} */')
		
		if 'direct' in function:
			assert pin_port[0] == 'P'
			io_port = pin_port[1]
			assert io_port in 'ABCD'
			io_bit = int(pin_port[2])
			assert io_bit in range(8)
			direct.append(f'GPIO_DECLARE_PIN_ACCESS_FUNCS({signal}, {io_port}, {io_bit})')

OUTFILE = 'gpio.local.h'
try:
	existing = open(OUTFILE, 'rt').read()
except FileNotFoundError:
	existing = None
	
text = []
text.append(f'''\
#ifndef GPIO_LOCAL_H__
#define GPIO_LOCAL_H__

// This file is autogenerated from `{infile}'.

// Pin Assignments for Arduino Pro Mini
enum {{    
''')
        
for group in pins.keys():
	text.append(f'\t/* {group} */')
	text.append(''.join([f'\t{pdef}\n' for pdef in pins[group]]))

text.append('};\n')

if direct:
	text.append('// Direct access ports.	')
	text.append('\n'.join(direct))
	text.append('\n')
	
text.append('#endif		// GPIO_LOCAL_H__')	

text = '\n'.join(text)
if text != existing:
	print("Updated file %s." % OUTFILE, file=sys.stderr)
	open(OUTFILE, 'wt').write(text)
else:
	print("Skipped file %s as unchanged." % OUTFILE, file=sys.stderr)

