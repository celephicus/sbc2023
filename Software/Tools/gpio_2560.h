#ifndef GPIO_2560_H__
#define GPIO_2560_H__

// This file is autogenerated from `..\Sargood\Slave\gpio_2560.csv'.

// Pin Assignments for Arduino Pro Mini
enum {
    // Misc
    GPIO_PIN_IR_REC = 2,                           // None
    GPIO_PIN_LED = 30,                             // Blinky LED

    // LCD
    GPIO_PIN_LCD_BL = 4,                           // None

    // Console
    GPIO_PIN_CONS_TX0 = 14,                        // Console FDTI serial
    GPIO_PIN_CONS_RX0 = 15,                        // Console FDTI serial

    // Bus
    GPIO_PIN_RS485_TXD = 16,                       // RS485 TX
    GPIO_PIN_RS485_RXD = 17,                       // RS485 RX
    GPIO_PIN_ATN = 31,                             // Pulse high to signal ATN low on bus.
    GPIO_PIN_RS485_TX_EN = 32,                     // Enable RS485 xmitter

    // Spare
    GPIO_PIN_D0 = 22,                              // Spare IO
    GPIO_PIN_D1 = 23,                              // Spare IO
    GPIO_PIN_D2 = 24,                              // Spare IO
    GPIO_PIN_D3 = 25,                              // Spare IO
    GPIO_PIN_D4 = 26,                              // Spare IO
    GPIO_PIN_D5 = 27,                              // Spare IO
    GPIO_PIN_D6 = 28,                              // Spare IO
    GPIO_PIN_D7 = 29,                              // Spare IO

    // Debug
    GPIO_PIN_MISO = 50,                            // ISP
    GPIO_PIN_MOSI = 51,                            // ISP
    GPIO_PIN_SCK = 52,                             // ISP
    GPIO_PIN_TCK = A4,                             // JTAG Debug
    GPIO_PIN_TMS = A5,                             // JTAG Debug
    GPIO_PIN_TDO = A6,                             // JTAG Debug
    GPIO_PIN_TDI = A7,                             // JTAG Debug
    GPIO_PIN_RESET = RESET,                        // JTAG / ISP

    // None
    GPIO_PIN_MON_12V_BUS = A0,                     // None
};

// Direct access ports.

// D0: Spare IO
static inline void gpioD0SetModeOutput() { DDRA |= _BV(0); }
static inline void gpioD0SetModeInput() { DDRA &= ~_BV(0); }
static inline void gpioD0SetMode(bool fout) { if (fout) DDRA |= _BV(0); else DDRA &= ~_BV(0); }
static inline bool gpioD0Read() { return PINA | _BV(0); }
static inline void gpioD0Toggle() { PORTA ^= _BV(0); }
static inline void gpioD0Set() { PORTA |= _BV(0); }
static inline void gpioD0Clear() { PORTA &= ~_BV(0); }
static inline void gpioD0Write(bool b) { if (b) PORTA |= _BV(0); else PORTA &= ~_BV(0); }

// D1: Spare IO
static inline void gpioD1SetModeOutput() { DDRA |= _BV(1); }
static inline void gpioD1SetModeInput() { DDRA &= ~_BV(1); }
static inline void gpioD1SetMode(bool fout) { if (fout) DDRA |= _BV(1); else DDRA &= ~_BV(1); }
static inline bool gpioD1Read() { return PINA | _BV(1); }
static inline void gpioD1Toggle() { PORTA ^= _BV(1); }
static inline void gpioD1Set() { PORTA |= _BV(1); }
static inline void gpioD1Clear() { PORTA &= ~_BV(1); }
static inline void gpioD1Write(bool b) { if (b) PORTA |= _BV(1); else PORTA &= ~_BV(1); }

// D2: Spare IO
static inline void gpioD2SetModeOutput() { DDRA |= _BV(2); }
static inline void gpioD2SetModeInput() { DDRA &= ~_BV(2); }
static inline void gpioD2SetMode(bool fout) { if (fout) DDRA |= _BV(2); else DDRA &= ~_BV(2); }
static inline bool gpioD2Read() { return PINA | _BV(2); }
static inline void gpioD2Toggle() { PORTA ^= _BV(2); }
static inline void gpioD2Set() { PORTA |= _BV(2); }
static inline void gpioD2Clear() { PORTA &= ~_BV(2); }
static inline void gpioD2Write(bool b) { if (b) PORTA |= _BV(2); else PORTA &= ~_BV(2); }

// D3: Spare IO
static inline void gpioD3SetModeOutput() { DDRA |= _BV(3); }
static inline void gpioD3SetModeInput() { DDRA &= ~_BV(3); }
static inline void gpioD3SetMode(bool fout) { if (fout) DDRA |= _BV(3); else DDRA &= ~_BV(3); }
static inline bool gpioD3Read() { return PINA | _BV(3); }
static inline void gpioD3Toggle() { PORTA ^= _BV(3); }
static inline void gpioD3Set() { PORTA |= _BV(3); }
static inline void gpioD3Clear() { PORTA &= ~_BV(3); }
static inline void gpioD3Write(bool b) { if (b) PORTA |= _BV(3); else PORTA &= ~_BV(3); }

// D4: Spare IO
static inline void gpioD4SetModeOutput() { DDRA |= _BV(4); }
static inline void gpioD4SetModeInput() { DDRA &= ~_BV(4); }
static inline void gpioD4SetMode(bool fout) { if (fout) DDRA |= _BV(4); else DDRA &= ~_BV(4); }
static inline bool gpioD4Read() { return PINA | _BV(4); }
static inline void gpioD4Toggle() { PORTA ^= _BV(4); }
static inline void gpioD4Set() { PORTA |= _BV(4); }
static inline void gpioD4Clear() { PORTA &= ~_BV(4); }
static inline void gpioD4Write(bool b) { if (b) PORTA |= _BV(4); else PORTA &= ~_BV(4); }

// D5: Spare IO
static inline void gpioD5SetModeOutput() { DDRA |= _BV(5); }
static inline void gpioD5SetModeInput() { DDRA &= ~_BV(5); }
static inline void gpioD5SetMode(bool fout) { if (fout) DDRA |= _BV(5); else DDRA &= ~_BV(5); }
static inline bool gpioD5Read() { return PINA | _BV(5); }
static inline void gpioD5Toggle() { PORTA ^= _BV(5); }
static inline void gpioD5Set() { PORTA |= _BV(5); }
static inline void gpioD5Clear() { PORTA &= ~_BV(5); }
static inline void gpioD5Write(bool b) { if (b) PORTA |= _BV(5); else PORTA &= ~_BV(5); }

// D6: Spare IO
static inline void gpioD6SetModeOutput() { DDRA |= _BV(6); }
static inline void gpioD6SetModeInput() { DDRA &= ~_BV(6); }
static inline void gpioD6SetMode(bool fout) { if (fout) DDRA |= _BV(6); else DDRA &= ~_BV(6); }
static inline bool gpioD6Read() { return PINA | _BV(6); }
static inline void gpioD6Toggle() { PORTA ^= _BV(6); }
static inline void gpioD6Set() { PORTA |= _BV(6); }
static inline void gpioD6Clear() { PORTA &= ~_BV(6); }
static inline void gpioD6Write(bool b) { if (b) PORTA |= _BV(6); else PORTA &= ~_BV(6); }

// D7: Spare IO
static inline void gpioD7SetModeOutput() { DDRA |= _BV(7); }
static inline void gpioD7SetModeInput() { DDRA &= ~_BV(7); }
static inline void gpioD7SetMode(bool fout) { if (fout) DDRA |= _BV(7); else DDRA &= ~_BV(7); }
static inline bool gpioD7Read() { return PINA | _BV(7); }
static inline void gpioD7Toggle() { PORTA ^= _BV(7); }
static inline void gpioD7Set() { PORTA |= _BV(7); }
static inline void gpioD7Clear() { PORTA &= ~_BV(7); }
static inline void gpioD7Write(bool b) { if (b) PORTA |= _BV(7); else PORTA &= ~_BV(7); }

#endif   // GPIO_2560_H__
