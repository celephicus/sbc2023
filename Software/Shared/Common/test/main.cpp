/* This file is autogenerated by grm -- do not edit. */

#ifndef UNITY_INCLUDE_CONFIG_H
#error "Must define UNITY_INCLUDE_CONFIG_H."
#endif

/*** Standard includes. ***/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>

#include "unity.h"


/*** Stuff copied from test files (should be #include's, declarations & macros only) ***/
#include <stdarg.h>
#include "project_config.h"
#include "myprintf.h"

// Max/min values
#define MAX_PRINTF_U ((CFG_MYPRINTF_T_UINT)-1)
#define MAX_PRINTF_I ((CFG_MYPRINTF_T_INT)(MAX_PRINTF_U >> 1))
#define MIN_PRINTF_I (-MAX_PRINTF_I - (CFG_MYPRINTF_T_INT)1)

#define MAX_PRINTF_UL ((CFG_MYPRINTF_T_L_UINT)-1)
#define MAX_PRINTF_IL ((CFG_MYPRINTF_T_L_INT)(MAX_PRINTF_UL >> 1))
#define MIN_PRINTF_IL (-MAX_PRINTF_IL - (CFG_MYPRINTF_T_L_INT)1)

const char* test_myprintf_str_max_u(uint8_t sz);
const char* test_myprintf_str_max_x(uint8_t sz);
const char* test_myprintf_str_max_b(uint8_t sz);
const char* test_myprintf_str_max_i(uint8_t sz);
const char* test_myprintf_str_min_i(uint8_t sz);

/*** External test functions scraped from test files. ***/
void test_int_sizes();
void test_myprintf_snsprintf(const char* exp, char rc_exp, size_t len, const char* fmt);
void test_printf_format_v(const char* expected, const char* fmt, va_list ap);
void test_printf_format(const char* expected, const char* fmt, ...);

/*** Fixture & dump functions from test files. ***/
/* None */

/* Declare test stubs. */
static void test_myprintf_snsprintf_stub_0(void) { test_myprintf_snsprintf(NULL, 0, 0, ""); }
static void test_myprintf_snsprintf_stub_1(void) { test_myprintf_snsprintf(NULL, 0, 0, "Z"); }
static void test_myprintf_snsprintf_stub_2(void) { test_myprintf_snsprintf("", 1, 1, ""); }
static void test_myprintf_snsprintf_stub_3(void) { test_myprintf_snsprintf("", 0, 1, "Z"); }
static void test_myprintf_snsprintf_stub_4(void) { test_myprintf_snsprintf("", 1, 2, ""); }
static void test_myprintf_snsprintf_stub_5(void) { test_myprintf_snsprintf("X", 1, 2, "X"); }
static void test_myprintf_snsprintf_stub_6(void) { test_myprintf_snsprintf("X", 0, 2, "XZ"); }
static void test_printf_format_stub_7(void) { test_printf_format("", ""); }
static void test_printf_format_stub_8(void) { test_printf_format("x", "x"); }
static void test_printf_format_stub_9(void) { test_printf_format("x%x", "x%%x"); }
static void test_printf_format_stub_10(void) { test_printf_format("x%x", "x%3%x"); }
static void test_printf_format_stub_11(void) { test_printf_format("x%x", "x%0%x"); }
static void test_printf_format_stub_12(void) { test_printf_format("x%x", "x%03%x"); }
static void test_printf_format_stub_13(void) { test_printf_format("x%x", "x%-3%x"); }
static void test_printf_format_stub_14(void) { test_printf_format("xzx", "x%cx", 'z'); }
static void test_printf_format_stub_15(void) { test_printf_format("xzx", "x%1cx", 'z'); }
static void test_printf_format_stub_16(void) { test_printf_format("x zx", "x%2cx", 'z'); }
static void test_printf_format_stub_17(void) { test_printf_format("xz x", "x%-2cx", 'z'); }
static void test_printf_format_stub_18(void) { test_printf_format("xzx", "x%sx", "z"); }
static void test_printf_format_stub_19(void) { test_printf_format("x(null)x", "x%sx", NULL); }
static void test_printf_format_stub_20(void) { test_printf_format("x  zx", "x%3sx", "z"); }
static void test_printf_format_stub_21(void) { test_printf_format("xz  x", "x%-3sx", "z"); }
static void test_printf_format_stub_22(void) { test_printf_format("x0x", "x%dx", 0); }
static void test_printf_format_stub_23(void) { test_printf_format("x123x", "x%dx", 123); }
static void test_printf_format_stub_24(void) { test_printf_format("x1x", "x%0dx", 1); }
static void test_printf_format_stub_25(void) { test_printf_format("x1x", "x%1dx", 1); }
static void test_printf_format_stub_26(void) { test_printf_format("x 1x", "x%2dx", 1); }
static void test_printf_format_stub_27(void) { test_printf_format("x01x", "x%02dx", 1); }
static void test_printf_format_stub_28(void) { test_printf_format("x1 x", "x%-2dx", 1); }
static void test_printf_format_stub_29(void) { test_printf_format("x0x", "x%ldx", (CFG_MYPRINTF_T_L_UINT)0); }
static void test_printf_format_stub_30(void) { test_printf_format("x123x", "x%ldx", (CFG_MYPRINTF_T_L_UINT)123); }
static void test_printf_format_stub_31(void) { test_printf_format("x1x", "x%0ldx", (CFG_MYPRINTF_T_L_UINT)1); }
static void test_printf_format_stub_32(void) { test_printf_format("x1x", "x%1Ldx", (CFG_MYPRINTF_T_L_UINT)1); }
static void test_printf_format_stub_33(void) { test_printf_format("x 1x", "x%2Ldx", (CFG_MYPRINTF_T_L_UINT)1); }
static void test_printf_format_stub_34(void) { test_printf_format("x01x", "x%02Ldx", (CFG_MYPRINTF_T_L_UINT)1); }
static void test_printf_format_stub_35(void) { test_printf_format("x1 x", "x%-2Ldx", (CFG_MYPRINTF_T_L_UINT)1); }
static void test_printf_format_stub_36(void) { test_printf_format(test_myprintf_str_max_u(sizeof(CFG_MYPRINTF_T_UINT)), "%u", MAX_PRINTF_U); }
static void test_printf_format_stub_37(void) { test_printf_format(test_myprintf_str_max_u(sizeof(CFG_MYPRINTF_T_L_UINT)), "%lu", MAX_PRINTF_UL); }
static void test_printf_format_stub_38(void) { test_printf_format(test_myprintf_str_max_x(sizeof(CFG_MYPRINTF_T_UINT)), "%x", MAX_PRINTF_U); }
static void test_printf_format_stub_39(void) { test_printf_format(test_myprintf_str_max_x(sizeof(CFG_MYPRINTF_T_L_UINT)), "%lx", MAX_PRINTF_UL); }
static void test_printf_format_stub_40(void) { test_printf_format(test_myprintf_str_max_i(sizeof(CFG_MYPRINTF_T_INT)), "%d", MAX_PRINTF_I); }
static void test_printf_format_stub_41(void) { test_printf_format(test_myprintf_str_min_i(sizeof(CFG_MYPRINTF_T_INT)), "%d", MIN_PRINTF_I); }
static void test_printf_format_stub_42(void) { test_printf_format(test_myprintf_str_max_i(sizeof(CFG_MYPRINTF_T_L_INT)), "%ld", MAX_PRINTF_IL); }
static void test_printf_format_stub_43(void) { test_printf_format(test_myprintf_str_min_i(sizeof(CFG_MYPRINTF_T_L_INT)), "%ld", MIN_PRINTF_IL); }
static void test_printf_format_stub_44(void) { test_printf_format("x0x", "x%xx", 0); }
static void test_printf_format_stub_45(void) { test_printf_format("xabcx", "x%xx", 0xABC); }
static void test_printf_format_stub_46(void) { test_printf_format("xABCx", "x%Xx", 0xABC); }
static void test_printf_format_stub_47(void) { test_printf_format("x0x", "x%Lxx", (CFG_MYPRINTF_T_L_UINT)0); }
static void test_printf_format_stub_48(void) { test_printf_format("xabcx", "x%Lxx", (CFG_MYPRINTF_T_L_UINT)0xABC); }
static void test_printf_format_stub_49(void) { test_printf_format("xABCx", "x%LXx", (CFG_MYPRINTF_T_L_UINT)0xABC); }
#if (MYPRINTF_TEST_BINARY)
static void test_printf_format_stub_50(void) { test_printf_format("x0x", "x%bx", 0); }
static void test_printf_format_stub_51(void) { test_printf_format("x101x", "x%bx", 5); }
static void test_printf_format_stub_52(void) { test_printf_format(test_myprintf_str_max_b(sizeof(CFG_MYPRINTF_T_UINT)), "%b", MAX_PRINTF_U); }
static void test_printf_format_stub_53(void) { test_printf_format(test_myprintf_str_max_b(sizeof(CFG_MYPRINTF_T_L_UINT)), "%lb", MAX_PRINTF_UL); }
#endif
static void test_printf_format_stub_54(void) { test_printf_format("!12345678!f00f!", "!%lx!%x!", (CFG_MYPRINTF_T_L_UINT)0x12345678, 0xf00f); }

/*** Extra Unity support. ***/

/* Functions for setup, diagnostics dump on a test failure & teardown. */
typedef void (*fixture_func_t)(void);
static fixture_func_t setUp_func, dump_func, tearDown_func;
void registerFixture(fixture_func_t setup, fixture_func_t dumper, fixture_func_t teardown) {
	setUp_func = setup;
	dump_func = dumper;
	tearDown_func = teardown;
}

void setUp() { if (setUp_func) setUp_func(); }
void dumpTestContext() { if (dump_func) dump_func(); }
void tearDown() { if (tearDown_func) tearDown_func(); }

static void do_run_test(UnityTestFunction func, const char* name, int line_num) {
#ifdef UNITY_USE_COMMAND_LINE_ARGS
    if (!UnityTestMatches())
        return;
#endif
	UnityDefaultTestRun(func, name, line_num);
}

static int parse_options(int argc, char** argv)
{
    int i;
    int verbosity = 0;

    for (i = 1; i < argc; i++)
    {
        if (argv[i][0] == '-')
        {
            switch (argv[i][1])
            {
                case 'v': /* report passes as well as fails */
                    verbosity = 0;
					break;
                case 'f': /* report fails only */
                    verbosity = 1;
					break;
                default:
                    UnityPrint("ERROR: Unknown Option: ");
                    UNITY_OUTPUT_CHAR(argv[i][1]);
                    UNITY_PRINT_EOL();
                    return 1;
            }
        }
		else 
		{
			UnityPrint("ERROR: Unknown Option: ");
			UnityPrint(argv[i]);
			UNITY_PRINT_EOL();
			return 1;
		}
    }

	UnityVerbosity(verbosity);
    return 0;
}

int main(int argc, char** argv) {
	int rc_parse;
	UnityBegin("");
	rc_parse = parse_options(argc, argv);
	if (rc_parse != 0)
		return rc_parse;
  
  UnitySetTestFile("test_printf.cpp");
  do_run_test(test_int_sizes, "test_int_sizes", 80);
  do_run_test(test_myprintf_snsprintf_stub_0, "test_myprintf_snsprintf(NULL, 0, 0, \"\")", 99);
  do_run_test(test_myprintf_snsprintf_stub_1, "test_myprintf_snsprintf(NULL, 0, 0, \"Z\")", 100);
  do_run_test(test_myprintf_snsprintf_stub_2, "test_myprintf_snsprintf(\"\", 1, 1, \"\")", 101);
  do_run_test(test_myprintf_snsprintf_stub_3, "test_myprintf_snsprintf(\"\", 0, 1, \"Z\")", 102);
  do_run_test(test_myprintf_snsprintf_stub_4, "test_myprintf_snsprintf(\"\", 1, 2, \"\")", 103);
  do_run_test(test_myprintf_snsprintf_stub_5, "test_myprintf_snsprintf(\"X\", 1, 2, \"X\")", 104);
  do_run_test(test_myprintf_snsprintf_stub_6, "test_myprintf_snsprintf(\"X\", 0, 2, \"XZ\")", 105);
  do_run_test(test_printf_format_stub_7, "test_printf_format(\"\", \"\")", 120);
  do_run_test(test_printf_format_stub_8, "test_printf_format(\"x\", \"x\")", 121);
  do_run_test(test_printf_format_stub_9, "test_printf_format(\"x%x\", \"x%%x\")", 124);
  do_run_test(test_printf_format_stub_10, "test_printf_format(\"x%x\", \"x%3%x\")", 125);
  do_run_test(test_printf_format_stub_11, "test_printf_format(\"x%x\", \"x%0%x\")", 126);
  do_run_test(test_printf_format_stub_12, "test_printf_format(\"x%x\", \"x%03%x\")", 127);
  do_run_test(test_printf_format_stub_13, "test_printf_format(\"x%x\", \"x%-3%x\")", 128);
  do_run_test(test_printf_format_stub_14, "test_printf_format(\"xzx\", \"x%cx\", 'z')", 131);
  do_run_test(test_printf_format_stub_15, "test_printf_format(\"xzx\", \"x%1cx\", 'z')", 132);
  do_run_test(test_printf_format_stub_16, "test_printf_format(\"x zx\", \"x%2cx\", 'z')", 133);
  do_run_test(test_printf_format_stub_17, "test_printf_format(\"xz x\", \"x%-2cx\", 'z')", 134);
  do_run_test(test_printf_format_stub_18, "test_printf_format(\"xzx\", \"x%sx\", \"z\")", 137);
  do_run_test(test_printf_format_stub_19, "test_printf_format(\"x(null)x\", \"x%sx\", NULL)", 138);
  do_run_test(test_printf_format_stub_20, "test_printf_format(\"x  zx\", \"x%3sx\", \"z\")", 139);
  do_run_test(test_printf_format_stub_21, "test_printf_format(\"xz  x\", \"x%-3sx\", \"z\")", 140);
  do_run_test(test_printf_format_stub_22, "test_printf_format(\"x0x\", \"x%dx\", 0)", 143);
  do_run_test(test_printf_format_stub_23, "test_printf_format(\"x123x\", \"x%dx\", 123)", 144);
  do_run_test(test_printf_format_stub_24, "test_printf_format(\"x1x\", \"x%0dx\", 1)", 145);
  do_run_test(test_printf_format_stub_25, "test_printf_format(\"x1x\", \"x%1dx\", 1)", 146);
  do_run_test(test_printf_format_stub_26, "test_printf_format(\"x 1x\", \"x%2dx\", 1)", 147);
  do_run_test(test_printf_format_stub_27, "test_printf_format(\"x01x\", \"x%02dx\", 1)", 148);
  do_run_test(test_printf_format_stub_28, "test_printf_format(\"x1 x\", \"x%-2dx\", 1)", 149);
  do_run_test(test_printf_format_stub_29, "test_printf_format(\"x0x\", \"x%ldx\", (CFG_MYPRINTF_T_L_UINT)0)", 152);
  do_run_test(test_printf_format_stub_30, "test_printf_format(\"x123x\", \"x%ldx\", (CFG_MYPRINTF_T_L_UINT)123)", 153);
  do_run_test(test_printf_format_stub_31, "test_printf_format(\"x1x\", \"x%0ldx\", (CFG_MYPRINTF_T_L_UINT)1)", 154);
  do_run_test(test_printf_format_stub_32, "test_printf_format(\"x1x\", \"x%1Ldx\", (CFG_MYPRINTF_T_L_UINT)1)", 155);
  do_run_test(test_printf_format_stub_33, "test_printf_format(\"x 1x\", \"x%2Ldx\", (CFG_MYPRINTF_T_L_UINT)1)", 156);
  do_run_test(test_printf_format_stub_34, "test_printf_format(\"x01x\", \"x%02Ldx\", (CFG_MYPRINTF_T_L_UINT)1)", 157);
  do_run_test(test_printf_format_stub_35, "test_printf_format(\"x1 x\", \"x%-2Ldx\", (CFG_MYPRINTF_T_L_UINT)1)", 158);
  do_run_test(test_printf_format_stub_36, "test_printf_format(test_myprintf_str_max_u(sizeof(CFG_MYPRINTF_T_UINT)), \"%u\", MAX_PRINTF_U)", 161);
  do_run_test(test_printf_format_stub_37, "test_printf_format(test_myprintf_str_max_u(sizeof(CFG_MYPRINTF_T_L_UINT)), \"%lu\", MAX_PRINTF_UL)", 162);
  do_run_test(test_printf_format_stub_38, "test_printf_format(test_myprintf_str_max_x(sizeof(CFG_MYPRINTF_T_UINT)), \"%x\", MAX_PRINTF_U)", 163);
  do_run_test(test_printf_format_stub_39, "test_printf_format(test_myprintf_str_max_x(sizeof(CFG_MYPRINTF_T_L_UINT)), \"%lx\", MAX_PRINTF_UL)", 164);
  do_run_test(test_printf_format_stub_40, "test_printf_format(test_myprintf_str_max_i(sizeof(CFG_MYPRINTF_T_INT)), \"%d\", MAX_PRINTF_I)", 165);
  do_run_test(test_printf_format_stub_41, "test_printf_format(test_myprintf_str_min_i(sizeof(CFG_MYPRINTF_T_INT)), \"%d\", MIN_PRINTF_I)", 166);
  do_run_test(test_printf_format_stub_42, "test_printf_format(test_myprintf_str_max_i(sizeof(CFG_MYPRINTF_T_L_INT)), \"%ld\", MAX_PRINTF_IL)", 167);
  do_run_test(test_printf_format_stub_43, "test_printf_format(test_myprintf_str_min_i(sizeof(CFG_MYPRINTF_T_L_INT)), \"%ld\", MIN_PRINTF_IL)", 168);
  do_run_test(test_printf_format_stub_44, "test_printf_format(\"x0x\", \"x%xx\", 0)", 171);
  do_run_test(test_printf_format_stub_45, "test_printf_format(\"xabcx\", \"x%xx\", 0xABC)", 172);
  do_run_test(test_printf_format_stub_46, "test_printf_format(\"xABCx\", \"x%Xx\", 0xABC)", 173);
  do_run_test(test_printf_format_stub_47, "test_printf_format(\"x0x\", \"x%Lxx\", (CFG_MYPRINTF_T_L_UINT)0)", 176);
  do_run_test(test_printf_format_stub_48, "test_printf_format(\"xabcx\", \"x%Lxx\", (CFG_MYPRINTF_T_L_UINT)0xABC)", 177);
  do_run_test(test_printf_format_stub_49, "test_printf_format(\"xABCx\", \"x%LXx\", (CFG_MYPRINTF_T_L_UINT)0xABC)", 178);
  #if(MYPRINTF_TEST_BINARY)
  do_run_test(test_printf_format_stub_50, "test_printf_format(\"x0x\", \"x%bx\", 0)", 182);
  do_run_test(test_printf_format_stub_51, "test_printf_format(\"x101x\", \"x%bx\", 5)", 183);
  do_run_test(test_printf_format_stub_52, "test_printf_format(test_myprintf_str_max_b(sizeof(CFG_MYPRINTF_T_UINT)), \"%b\", MAX_PRINTF_U)", 184);
  do_run_test(test_printf_format_stub_53, "test_printf_format(test_myprintf_str_max_b(sizeof(CFG_MYPRINTF_T_L_UINT)), \"%lb\", MAX_PRINTF_UL)", 185);
  #endif
  do_run_test(test_printf_format_stub_54, "test_printf_format(\"!12345678!f00f!\", \"!%lx!%x!\", (CFG_MYPRINTF_T_L_UINT)0x12345678, 0xf00f)", 190);

  return UnityEnd();
}

/*

*/
