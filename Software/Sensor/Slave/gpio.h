#ifndef GPIO_H__
#define GPIO_H__

// This file is autogenerated from `gpio.csv'.

// Pin Assignments for Arduino Pro Mini
enum {
    // Bus
    GPIO_PIN_RS485_TXD = 1,                        // RS485 TX
    GPIO_PIN_RS485_RXD = 0,                        // RS485 RX
    GPIO_PIN_ATN = 2,                              // Pulse high to signal ATN low on bus.
    GPIO_PIN_RS485_TX_EN = A0,                     // Enable RS485 xmitter
    GPIO_PIN_VOLTS_MON_BUS = A7,                   // Monitor volts on bus

    // Spare
    GPIO_PIN_SPARE_1 = 3,                          // Spare for debugging
    GPIO_PIN_SPARE_2 = 4,                          // Spare for debugging
    GPIO_PIN_SPARE_3 = 5,                          // Spare for debugging

    // Console
    GPIO_PIN_CONS_RX = 8,                          // console serial data in
    GPIO_PIN_CONS_TX = 9,                          // console serial data out

    // SPI
    GPIO_PIN_SSEL = 10,                            // SPI slave select to Accelerometer
    GPIO_PIN_MOSI = 11,                            // SPI to Accelerometer
    GPIO_PIN_MISO = 12,                            // SPI to Accelerometer
    GPIO_PIN_SCK = 13,                             // SPI to Accelerometer

    // Misc
    GPIO_PIN_LED = A1,                             // Blinky LED
    GPIO_PIN_SEL0 = A2,                            // Address select, link to 0V.
    GPIO_PIN_SEL1 = A3,                            // Address select, link to 0V.
};

// Direct access ports.

// SPARE_1: Spare for debugging
static inline void gpioSpare1SetModeOutput() { DDRD |= _BV(3); }
static inline void gpioSpare1SetModeInput() { DDRD &= ~_BV(3); }
static inline void gpioSpare1SetMode(bool fout) { if (fout) DDRD |= _BV(3); else DDRD &= ~_BV(3); }
static inline bool gpioSpare1Read() { return PIND | _BV(3); }
static inline void gpioSpare1Toggle() { PORTD ^= _BV(3); }
static inline void gpioSpare1Set() { PORTD |= _BV(3); }
static inline void gpioSpare1Clear() { PORTD &= ~_BV(3); }
static inline void gpioSpare1Write(bool b) { if (b) PORTD |= _BV(3); else PORTD &= ~_BV(3); }

// SPARE_2: Spare for debugging
static inline void gpioSpare2SetModeOutput() { DDRD |= _BV(4); }
static inline void gpioSpare2SetModeInput() { DDRD &= ~_BV(4); }
static inline void gpioSpare2SetMode(bool fout) { if (fout) DDRD |= _BV(4); else DDRD &= ~_BV(4); }
static inline bool gpioSpare2Read() { return PIND | _BV(4); }
static inline void gpioSpare2Toggle() { PORTD ^= _BV(4); }
static inline void gpioSpare2Set() { PORTD |= _BV(4); }
static inline void gpioSpare2Clear() { PORTD &= ~_BV(4); }
static inline void gpioSpare2Write(bool b) { if (b) PORTD |= _BV(4); else PORTD &= ~_BV(4); }

// SPARE_3: Spare for debugging
static inline void gpioSpare3SetModeOutput() { DDRD |= _BV(5); }
static inline void gpioSpare3SetModeInput() { DDRD &= ~_BV(5); }
static inline void gpioSpare3SetMode(bool fout) { if (fout) DDRD |= _BV(5); else DDRD &= ~_BV(5); }
static inline bool gpioSpare3Read() { return PIND | _BV(5); }
static inline void gpioSpare3Toggle() { PORTD ^= _BV(5); }
static inline void gpioSpare3Set() { PORTD |= _BV(5); }
static inline void gpioSpare3Clear() { PORTD &= ~_BV(5); }
static inline void gpioSpare3Write(bool b) { if (b) PORTD |= _BV(5); else PORTD &= ~_BV(5); }

// LED: Blinky LED
static inline void gpioLedSetModeOutput() { DDRC |= _BV(1); }
static inline void gpioLedSetModeInput() { DDRC &= ~_BV(1); }
static inline void gpioLedSetMode(bool fout) { if (fout) DDRC |= _BV(1); else DDRC &= ~_BV(1); }
static inline bool gpioLedRead() { return PINC | _BV(1); }
static inline void gpioLedToggle() { PORTC ^= _BV(1); }
static inline void gpioLedSet() { PORTC |= _BV(1); }
static inline void gpioLedClear() { PORTC &= ~_BV(1); }
static inline void gpioLedWrite(bool b) { if (b) PORTC |= _BV(1); else PORTC &= ~_BV(1); }

// List unused pins
#define GPIO_UNUSED_PINS 6, 7, A4, A5

#endif   // GPIO_H__
