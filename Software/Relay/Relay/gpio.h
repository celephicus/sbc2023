#ifndef GPIO_H__
#define GPIO_H__

// This file is autogenerated from `gpio.csv'. Do not edit, your changes will be lost!

// Pin Assignments for Arduino Mega2560, project: <none>.
enum {
    // Bus
    GPIO_PIN_RS485_TXD = 1,                        // RS485 TX
    GPIO_PIN_RS485_RXD = 0,                        // RS485 RX
    GPIO_PIN_ATN = 2,                              // Pulse high to signal ATN low on bus.
    GPIO_PIN_RS485_TX_EN = A0,                     // Enable RS485 xmitter
    GPIO_PIN_VOLTS_MON_BUS = A7,                   // Monitor volts on bus

    // Relay Driver
    GPIO_PIN_WDOG = 3,                             // Falling edge pats output relay watchdog.
    GPIO_PIN_RSEL = 6,                             // Relay driver select

    // Spare
    GPIO_PIN_SP_0 = 4,                             // Spare for debugging
    GPIO_PIN_SP_4 = 5,                             // Spare for debugging

    // Console
    GPIO_PIN_CONS_RX = 7,                          // console serial data in
    GPIO_PIN_CONS_TX = 8,                          // console serial data out

    // Bed Adaptor
    GPIO_PIN_SP_3 = 9,                             // Spare to adaptor board (SPARE_3 on schematic)
    GPIO_PIN_SP_1 = A2,                            // Spare to adaptor board (SPARE_1 on schematic)
    GPIO_PIN_SP_2 = A3,                            // Spare to adaptor board (SPARE_2 on schematic)
    GPIO_PIN_SDA = A4,                             // I2C to Adaptor
    GPIO_PIN_SCL = A5,                             // I2C to Adaptor

    // SPI
    GPIO_PIN_SSEL = 10,                            // SPI slave select to Adaptor
    GPIO_PIN_MOSI = 11,                            // SPI to Adaptor
    GPIO_PIN_MISO = 12,                            // SPI to Adaptor
    GPIO_PIN_SCK = 13,                             // SPI to Adaptor

    // Misc
    GPIO_PIN_LED = A1,                             // Blinky LED

    // Power
    GPIO_PIN_VOLTS_MON_12V_IN = A6,                // Monitor volts input
};
// Extra symbols from symbol directive.
#define GPIO_SERIAL_RS485 Serial // Serial port for RS485.


// Direct access ports.

// WDOG: Falling edge pats output relay watchdog.
static inline void gpioWdogSetModeOutput() { DDRD |= _BV(3); }
static inline void gpioWdogSetModeInput() { DDRD &= ~_BV(3); }
static inline void gpioWdogSetMode(bool fout) { if (fout) DDRD |= _BV(3); else DDRD &= ~_BV(3); }
static inline bool gpioWdogRead() { return PIND | _BV(3); }
static inline void gpioWdogToggle() { PORTD ^= _BV(3); }
static inline void gpioWdogSet() { PORTD |= _BV(3); }
static inline void gpioWdogClear() { PORTD &= ~_BV(3); }
static inline void gpioWdogWrite(bool b) { if (b) PORTD |= _BV(3); else PORTD &= ~_BV(3); }

// SP_0: Spare for debugging
static inline void gpioSp0SetModeOutput() { DDRD |= _BV(4); }
static inline void gpioSp0SetModeInput() { DDRD &= ~_BV(4); }
static inline void gpioSp0SetMode(bool fout) { if (fout) DDRD |= _BV(4); else DDRD &= ~_BV(4); }
static inline bool gpioSp0Read() { return PIND | _BV(4); }
static inline void gpioSp0Toggle() { PORTD ^= _BV(4); }
static inline void gpioSp0Set() { PORTD |= _BV(4); }
static inline void gpioSp0Clear() { PORTD &= ~_BV(4); }
static inline void gpioSp0Write(bool b) { if (b) PORTD |= _BV(4); else PORTD &= ~_BV(4); }

// SP_4: Spare for debugging
static inline void gpioSp4SetModeOutput() { DDRD |= _BV(5); }
static inline void gpioSp4SetModeInput() { DDRD &= ~_BV(5); }
static inline void gpioSp4SetMode(bool fout) { if (fout) DDRD |= _BV(5); else DDRD &= ~_BV(5); }
static inline bool gpioSp4Read() { return PIND | _BV(5); }
static inline void gpioSp4Toggle() { PORTD ^= _BV(5); }
static inline void gpioSp4Set() { PORTD |= _BV(5); }
static inline void gpioSp4Clear() { PORTD &= ~_BV(5); }
static inline void gpioSp4Write(bool b) { if (b) PORTD |= _BV(5); else PORTD &= ~_BV(5); }

// SP_3: Spare to adaptor board (SPARE_3 on schematic)
static inline void gpioSp3SetModeOutput() { DDRB |= _BV(1); }
static inline void gpioSp3SetModeInput() { DDRB &= ~_BV(1); }
static inline void gpioSp3SetMode(bool fout) { if (fout) DDRB |= _BV(1); else DDRB &= ~_BV(1); }
static inline bool gpioSp3Read() { return PINB | _BV(1); }
static inline void gpioSp3Toggle() { PORTB ^= _BV(1); }
static inline void gpioSp3Set() { PORTB |= _BV(1); }
static inline void gpioSp3Clear() { PORTB &= ~_BV(1); }
static inline void gpioSp3Write(bool b) { if (b) PORTB |= _BV(1); else PORTB &= ~_BV(1); }

// LED: Blinky LED
static inline void gpioLedSetModeOutput() { DDRC |= _BV(1); }
static inline void gpioLedSetModeInput() { DDRC &= ~_BV(1); }
static inline void gpioLedSetMode(bool fout) { if (fout) DDRC |= _BV(1); else DDRC &= ~_BV(1); }
static inline bool gpioLedRead() { return PINC | _BV(1); }
static inline void gpioLedToggle() { PORTC ^= _BV(1); }
static inline void gpioLedSet() { PORTC |= _BV(1); }
static inline void gpioLedClear() { PORTC &= ~_BV(1); }
static inline void gpioLedWrite(bool b) { if (b) PORTC |= _BV(1); else PORTC &= ~_BV(1); }

// SP_1: Spare to adaptor board (SPARE_1 on schematic)
static inline void gpioSp1SetModeOutput() { DDRC |= _BV(2); }
static inline void gpioSp1SetModeInput() { DDRC &= ~_BV(2); }
static inline void gpioSp1SetMode(bool fout) { if (fout) DDRC |= _BV(2); else DDRC &= ~_BV(2); }
static inline bool gpioSp1Read() { return PINC | _BV(2); }
static inline void gpioSp1Toggle() { PORTC ^= _BV(2); }
static inline void gpioSp1Set() { PORTC |= _BV(2); }
static inline void gpioSp1Clear() { PORTC &= ~_BV(2); }
static inline void gpioSp1Write(bool b) { if (b) PORTC |= _BV(2); else PORTC &= ~_BV(2); }

// SP_2: Spare to adaptor board (SPARE_2 on schematic)
static inline void gpioSp2SetModeOutput() { DDRC |= _BV(3); }
static inline void gpioSp2SetModeInput() { DDRC &= ~_BV(3); }
static inline void gpioSp2SetMode(bool fout) { if (fout) DDRC |= _BV(3); else DDRC &= ~_BV(3); }
static inline bool gpioSp2Read() { return PINC | _BV(3); }
static inline void gpioSp2Toggle() { PORTC ^= _BV(3); }
static inline void gpioSp2Set() { PORTC |= _BV(3); }
static inline void gpioSp2Clear() { PORTC &= ~_BV(3); }
static inline void gpioSp2Write(bool b) { if (b) PORTC |= _BV(3); else PORTC &= ~_BV(3); }

#endif   // GPIO_H__
